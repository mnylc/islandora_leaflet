<?php

/**
 * @file
 * This file part of Islandora Leaflet.
 *
 *  (c) 2017. Diego Pino Navarro <dpino@metro.org>
 *  https://github.com/mnylc/islandora_leaflet.
 *
 *  This source file is subject to the GPL V 3.0 license that is bundled
 *  with this source code and at
 *  https://github.com/mnylc/islandora_leaflet/blob/master/LICENSE.
 */

/**
 * Implements hook_theme().
 *
 * We supply a pattern so we can overide templates at the theme level if needed.
 * we can append a pid to a template and the new template file will be called
 * (the pids colon should be replaced with a dash).
*/
function islandora_leaflet_theme($existing, $type, $theme, $path) {
  return array(
    'islandora_leaflet_solr_map' => array(
    'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-leaflet-solrresult-map',
      'variables' => array('results' => NULL,'elements'=>NULL),
    ),
  );
}

/**
 * Implements hook_library().
 */
function islandora_leaflet_library() {

  $path = drupal_get_path('module', 'islandora_leaflet');
  $libraries['leaflet_markercluster_layercontrol'] = array(
    'title' => 'Leaflet Markercluster Layer Control',
    'version' => 0.1,
    'js' => array(
      array(
        'type' => 'file',
        'data' => "$path/js/leaflet.markercluster.layercontrol.js",
        'group' => JS_LIBRARY,
        'preprocess' => FALSE,
        'weight' => 2,
      ),
    ),
  );
  $libraries['leaflet_sidebar'] = array(
    'title' => 'Leaflet Sidebar',
    'version' => 1.1,
    'css' => array(
      "$path/css/L.Control.Sidebar.css" => array(
        'type' => 'file',
        'media' => 'screen',
      ),
    ),
    'js' => array(
      array(
        'type' => 'file',
        'data' => "$path/js/L.Control.Sidebar.js",
        'group' => JS_LIBRARY,
        'preprocess' => FALSE,
        'weight' => 1,
      ),
    ),
  );
  $libraries['leaflet_fullscreen'] = array(
    'title' => 'Leaflet Fullscreen Control',
    'version' => 1.1,
    'js' => array(
      array(
        'type' => 'file',
        'data' => "$path/js/L.Control.FullScreen.js",
        'group' => JS_LIBRARY,
        'preprocess' => FALSE,
        'weight' => 1.5,
      ),
    ),
  );
  return $libraries;
}

/**
 * A leaftlet map prebuild alter hook implementation.
 */
function islandora_leaflet_leaflet_map_prebuild_alter(&$vars = NULL) {
  if (!isset($vars['map']['settings']['maxClusterRadius']) || $vars['map']['settings']['maxClusterRadius'] > 0) {
    drupal_add_library('islandora_leaflet', 'leaflet_sidebar');
    drupal_add_library('islandora_leaflet', 'leaflet_fullscreen');
    drupal_add_library('islandora_leaflet', 'leaflet_markercluster_layercontrol');
    // Increase weight so we're included after 'leaflet_markercluster_drupal.js'.
    $options = array('type' => 'file', 'weight' => 2);
    drupal_add_js(drupal_get_path('module', 'islandora_leaflet') . '/js/leaflet.markercluster.layercontrol.js', $options);
  }
}

/**
 * Implements hook_islandora_solr_primary_display().
 */
islandora_leaflet_islandora_solr_primary_display() {
  return array(
    'solrleaflet' => array(
      'name' => t('Results in a Leaflet map'),
      'module' => 'islandora_leaflet',
      'file' => 'includes/leaflet_results.inc',
      'class' => "IslandoraSolrResultsLeaflet",
      'function' => "displayResults",
      'description' => t("Display search results in a geographic context, a.k.a a MAP"),
    ),
  );
}

/**
 * Implements hook_islandora_solr_query.
 */
function islandora_leaflet_islandora_solr_query($islandora_solr_query) {
 
  if ($islandora_solr_query->display == 'solrleaflet') {
    dpm($islandora_solr_query);
    //$islandora_solr_query->solrParams['sort'] = 'fgs.createdDate desc';
  }
}
